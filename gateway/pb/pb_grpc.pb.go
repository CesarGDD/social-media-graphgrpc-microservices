// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	ListUsersById(ctx context.Context, in *ListUsersByIdRequest, opts ...grpc.CallOption) (*ListUsersByIdResponse, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/pb.UsersService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/pb.UsersService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/pb.UsersService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/pb.UsersService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, "/pb.UsersService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) ListUsersById(ctx context.Context, in *ListUsersByIdRequest, opts ...grpc.CallOption) (*ListUsersByIdResponse, error) {
	out := new(ListUsersByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.UsersService/ListUsersById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	ListUsersById(context.Context, *ListUsersByIdRequest) (*ListUsersByIdResponse, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUsersServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUsersServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUsersServiceServer) ListUsersById(context.Context, *ListUsersByIdRequest) (*ListUsersByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsersById not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UsersService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UsersService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UsersService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UsersService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UsersService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_ListUsersById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).ListUsersById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UsersService/ListUsersById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).ListUsersById(ctx, req.(*ListUsersByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UsersService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UsersService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UsersService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UsersService_DeleteUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UsersService_ListUsers_Handler,
		},
		{
			MethodName: "ListUsersById",
			Handler:    _UsersService_ListUsersById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}

// PostsServiceClient is the client API for PostsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostsServiceClient interface {
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
	ListPosts(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*ListPostsResponse, error)
	ListPostsById(ctx context.Context, in *ListPostsByIdRequest, opts ...grpc.CallOption) (*ListPostsByIdResponse, error)
	ListPostsByUserId(ctx context.Context, in *ListPostsByUserIdRequest, opts ...grpc.CallOption) (*ListPostsByUserIdResponse, error)
}

type postsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostsServiceClient(cc grpc.ClientConnInterface) PostsServiceClient {
	return &postsServiceClient{cc}
}

func (c *postsServiceClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, "/pb.PostsService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, "/pb.PostsService/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error) {
	out := new(UpdatePostResponse)
	err := c.cc.Invoke(ctx, "/pb.PostsService/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	out := new(DeletePostResponse)
	err := c.cc.Invoke(ctx, "/pb.PostsService/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) ListPosts(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*ListPostsResponse, error) {
	out := new(ListPostsResponse)
	err := c.cc.Invoke(ctx, "/pb.PostsService/ListPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) ListPostsById(ctx context.Context, in *ListPostsByIdRequest, opts ...grpc.CallOption) (*ListPostsByIdResponse, error) {
	out := new(ListPostsByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.PostsService/ListPostsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) ListPostsByUserId(ctx context.Context, in *ListPostsByUserIdRequest, opts ...grpc.CallOption) (*ListPostsByUserIdResponse, error) {
	out := new(ListPostsByUserIdResponse)
	err := c.cc.Invoke(ctx, "/pb.PostsService/ListPostsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostsServiceServer is the server API for PostsService service.
// All implementations must embed UnimplementedPostsServiceServer
// for forward compatibility
type PostsServiceServer interface {
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error)
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error)
	ListPosts(context.Context, *ListPostsRequest) (*ListPostsResponse, error)
	ListPostsById(context.Context, *ListPostsByIdRequest) (*ListPostsByIdResponse, error)
	ListPostsByUserId(context.Context, *ListPostsByUserIdRequest) (*ListPostsByUserIdResponse, error)
	mustEmbedUnimplementedPostsServiceServer()
}

// UnimplementedPostsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostsServiceServer struct {
}

func (UnimplementedPostsServiceServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostsServiceServer) GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedPostsServiceServer) UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostsServiceServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostsServiceServer) ListPosts(context.Context, *ListPostsRequest) (*ListPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPosts not implemented")
}
func (UnimplementedPostsServiceServer) ListPostsById(context.Context, *ListPostsByIdRequest) (*ListPostsByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostsById not implemented")
}
func (UnimplementedPostsServiceServer) ListPostsByUserId(context.Context, *ListPostsByUserIdRequest) (*ListPostsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostsByUserId not implemented")
}
func (UnimplementedPostsServiceServer) mustEmbedUnimplementedPostsServiceServer() {}

// UnsafePostsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostsServiceServer will
// result in compilation errors.
type UnsafePostsServiceServer interface {
	mustEmbedUnimplementedPostsServiceServer()
}

func RegisterPostsServiceServer(s grpc.ServiceRegistrar, srv PostsServiceServer) {
	s.RegisterService(&PostsService_ServiceDesc, srv)
}

func _PostsService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostsService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostsService/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostsService/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostsService/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_ListPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).ListPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostsService/ListPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).ListPosts(ctx, req.(*ListPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_ListPostsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).ListPostsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostsService/ListPostsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).ListPostsById(ctx, req.(*ListPostsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_ListPostsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).ListPostsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostsService/ListPostsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).ListPostsByUserId(ctx, req.(*ListPostsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostsService_ServiceDesc is the grpc.ServiceDesc for PostsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PostsService",
	HandlerType: (*PostsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _PostsService_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _PostsService_GetPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostsService_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostsService_DeletePost_Handler,
		},
		{
			MethodName: "ListPosts",
			Handler:    _PostsService_ListPosts_Handler,
		},
		{
			MethodName: "ListPostsById",
			Handler:    _PostsService_ListPostsById_Handler,
		},
		{
			MethodName: "ListPostsByUserId",
			Handler:    _PostsService_ListPostsByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}

// CommentsServiceClient is the client API for CommentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentsServiceClient interface {
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
	ListCommentsById(ctx context.Context, in *ListCommentsByIdRequest, opts ...grpc.CallOption) (*ListCommentsByIdResponse, error)
	ListCommentsByPostId(ctx context.Context, in *ListCommentsByPostIdRequest, opts ...grpc.CallOption) (*ListCommentsByPostIdResponse, error)
}

type commentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentsServiceClient(cc grpc.ClientConnInterface) CommentsServiceClient {
	return &commentsServiceClient{cc}
}

func (c *commentsServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentsService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error) {
	out := new(GetCommentResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentsService/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error) {
	out := new(UpdateCommentResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentsService/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentsService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentsService/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) ListCommentsById(ctx context.Context, in *ListCommentsByIdRequest, opts ...grpc.CallOption) (*ListCommentsByIdResponse, error) {
	out := new(ListCommentsByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentsService/ListCommentsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentsServiceClient) ListCommentsByPostId(ctx context.Context, in *ListCommentsByPostIdRequest, opts ...grpc.CallOption) (*ListCommentsByPostIdResponse, error) {
	out := new(ListCommentsByPostIdResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentsService/ListCommentsByPostId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentsServiceServer is the server API for CommentsService service.
// All implementations must embed UnimplementedCommentsServiceServer
// for forward compatibility
type CommentsServiceServer interface {
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
	ListCommentsById(context.Context, *ListCommentsByIdRequest) (*ListCommentsByIdResponse, error)
	ListCommentsByPostId(context.Context, *ListCommentsByPostIdRequest) (*ListCommentsByPostIdResponse, error)
	mustEmbedUnimplementedCommentsServiceServer()
}

// UnimplementedCommentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentsServiceServer struct {
}

func (UnimplementedCommentsServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCommentsServiceServer) GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedCommentsServiceServer) UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCommentsServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCommentsServiceServer) ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (UnimplementedCommentsServiceServer) ListCommentsById(context.Context, *ListCommentsByIdRequest) (*ListCommentsByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentsById not implemented")
}
func (UnimplementedCommentsServiceServer) ListCommentsByPostId(context.Context, *ListCommentsByPostIdRequest) (*ListCommentsByPostIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentsByPostId not implemented")
}
func (UnimplementedCommentsServiceServer) mustEmbedUnimplementedCommentsServiceServer() {}

// UnsafeCommentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentsServiceServer will
// result in compilation errors.
type UnsafeCommentsServiceServer interface {
	mustEmbedUnimplementedCommentsServiceServer()
}

func RegisterCommentsServiceServer(s grpc.ServiceRegistrar, srv CommentsServiceServer) {
	s.RegisterService(&CommentsService_ServiceDesc, srv)
}

func _CommentsService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentsService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentsService/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentsService/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentsService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentsService/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_ListCommentsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).ListCommentsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentsService/ListCommentsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).ListCommentsById(ctx, req.(*ListCommentsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentsService_ListCommentsByPostId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsByPostIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentsServiceServer).ListCommentsByPostId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentsService/ListCommentsByPostId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentsServiceServer).ListCommentsByPostId(ctx, req.(*ListCommentsByPostIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentsService_ServiceDesc is the grpc.ServiceDesc for CommentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CommentsService",
	HandlerType: (*CommentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _CommentsService_CreateComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _CommentsService_GetComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CommentsService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentsService_DeleteComment_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _CommentsService_ListComments_Handler,
		},
		{
			MethodName: "ListCommentsById",
			Handler:    _CommentsService_ListCommentsById_Handler,
		},
		{
			MethodName: "ListCommentsByPostId",
			Handler:    _CommentsService_ListCommentsByPostId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}

// PostLikesServiceClient is the client API for PostLikesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostLikesServiceClient interface {
	CreatePostLike(ctx context.Context, in *CreatePostLikeRequest, opts ...grpc.CallOption) (*CreatePostLikeResponse, error)
	GetPostLike(ctx context.Context, in *GetPostLikeRequest, opts ...grpc.CallOption) (*GetPostLikeResponse, error)
	DeletePostLike(ctx context.Context, in *DeletePostLikeRequest, opts ...grpc.CallOption) (*DeletePostLikeResponse, error)
	ListPostLikes(ctx context.Context, in *ListPostLikesRequest, opts ...grpc.CallOption) (*ListPostLikesResponse, error)
	ListPostLikesById(ctx context.Context, in *ListPostLikesByIdRequest, opts ...grpc.CallOption) (*ListPostLikesByIdResponse, error)
	ListPostLikesByPostId(ctx context.Context, in *ListPostLikesByPostIdRequest, opts ...grpc.CallOption) (*ListPostLikesByPostIdResponse, error)
}

type postLikesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostLikesServiceClient(cc grpc.ClientConnInterface) PostLikesServiceClient {
	return &postLikesServiceClient{cc}
}

func (c *postLikesServiceClient) CreatePostLike(ctx context.Context, in *CreatePostLikeRequest, opts ...grpc.CallOption) (*CreatePostLikeResponse, error) {
	out := new(CreatePostLikeResponse)
	err := c.cc.Invoke(ctx, "/pb.PostLikesService/CreatePostLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikesServiceClient) GetPostLike(ctx context.Context, in *GetPostLikeRequest, opts ...grpc.CallOption) (*GetPostLikeResponse, error) {
	out := new(GetPostLikeResponse)
	err := c.cc.Invoke(ctx, "/pb.PostLikesService/GetPostLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikesServiceClient) DeletePostLike(ctx context.Context, in *DeletePostLikeRequest, opts ...grpc.CallOption) (*DeletePostLikeResponse, error) {
	out := new(DeletePostLikeResponse)
	err := c.cc.Invoke(ctx, "/pb.PostLikesService/DeletePostLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikesServiceClient) ListPostLikes(ctx context.Context, in *ListPostLikesRequest, opts ...grpc.CallOption) (*ListPostLikesResponse, error) {
	out := new(ListPostLikesResponse)
	err := c.cc.Invoke(ctx, "/pb.PostLikesService/ListPostLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikesServiceClient) ListPostLikesById(ctx context.Context, in *ListPostLikesByIdRequest, opts ...grpc.CallOption) (*ListPostLikesByIdResponse, error) {
	out := new(ListPostLikesByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.PostLikesService/ListPostLikesById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikesServiceClient) ListPostLikesByPostId(ctx context.Context, in *ListPostLikesByPostIdRequest, opts ...grpc.CallOption) (*ListPostLikesByPostIdResponse, error) {
	out := new(ListPostLikesByPostIdResponse)
	err := c.cc.Invoke(ctx, "/pb.PostLikesService/ListPostLikesByPostId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostLikesServiceServer is the server API for PostLikesService service.
// All implementations must embed UnimplementedPostLikesServiceServer
// for forward compatibility
type PostLikesServiceServer interface {
	CreatePostLike(context.Context, *CreatePostLikeRequest) (*CreatePostLikeResponse, error)
	GetPostLike(context.Context, *GetPostLikeRequest) (*GetPostLikeResponse, error)
	DeletePostLike(context.Context, *DeletePostLikeRequest) (*DeletePostLikeResponse, error)
	ListPostLikes(context.Context, *ListPostLikesRequest) (*ListPostLikesResponse, error)
	ListPostLikesById(context.Context, *ListPostLikesByIdRequest) (*ListPostLikesByIdResponse, error)
	ListPostLikesByPostId(context.Context, *ListPostLikesByPostIdRequest) (*ListPostLikesByPostIdResponse, error)
	mustEmbedUnimplementedPostLikesServiceServer()
}

// UnimplementedPostLikesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostLikesServiceServer struct {
}

func (UnimplementedPostLikesServiceServer) CreatePostLike(context.Context, *CreatePostLikeRequest) (*CreatePostLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostLike not implemented")
}
func (UnimplementedPostLikesServiceServer) GetPostLike(context.Context, *GetPostLikeRequest) (*GetPostLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostLike not implemented")
}
func (UnimplementedPostLikesServiceServer) DeletePostLike(context.Context, *DeletePostLikeRequest) (*DeletePostLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostLike not implemented")
}
func (UnimplementedPostLikesServiceServer) ListPostLikes(context.Context, *ListPostLikesRequest) (*ListPostLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostLikes not implemented")
}
func (UnimplementedPostLikesServiceServer) ListPostLikesById(context.Context, *ListPostLikesByIdRequest) (*ListPostLikesByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostLikesById not implemented")
}
func (UnimplementedPostLikesServiceServer) ListPostLikesByPostId(context.Context, *ListPostLikesByPostIdRequest) (*ListPostLikesByPostIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostLikesByPostId not implemented")
}
func (UnimplementedPostLikesServiceServer) mustEmbedUnimplementedPostLikesServiceServer() {}

// UnsafePostLikesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostLikesServiceServer will
// result in compilation errors.
type UnsafePostLikesServiceServer interface {
	mustEmbedUnimplementedPostLikesServiceServer()
}

func RegisterPostLikesServiceServer(s grpc.ServiceRegistrar, srv PostLikesServiceServer) {
	s.RegisterService(&PostLikesService_ServiceDesc, srv)
}

func _PostLikesService_CreatePostLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikesServiceServer).CreatePostLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostLikesService/CreatePostLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikesServiceServer).CreatePostLike(ctx, req.(*CreatePostLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikesService_GetPostLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikesServiceServer).GetPostLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostLikesService/GetPostLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikesServiceServer).GetPostLike(ctx, req.(*GetPostLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikesService_DeletePostLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikesServiceServer).DeletePostLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostLikesService/DeletePostLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikesServiceServer).DeletePostLike(ctx, req.(*DeletePostLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikesService_ListPostLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikesServiceServer).ListPostLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostLikesService/ListPostLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikesServiceServer).ListPostLikes(ctx, req.(*ListPostLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikesService_ListPostLikesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostLikesByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikesServiceServer).ListPostLikesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostLikesService/ListPostLikesById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikesServiceServer).ListPostLikesById(ctx, req.(*ListPostLikesByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikesService_ListPostLikesByPostId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostLikesByPostIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikesServiceServer).ListPostLikesByPostId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostLikesService/ListPostLikesByPostId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikesServiceServer).ListPostLikesByPostId(ctx, req.(*ListPostLikesByPostIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostLikesService_ServiceDesc is the grpc.ServiceDesc for PostLikesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostLikesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PostLikesService",
	HandlerType: (*PostLikesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePostLike",
			Handler:    _PostLikesService_CreatePostLike_Handler,
		},
		{
			MethodName: "GetPostLike",
			Handler:    _PostLikesService_GetPostLike_Handler,
		},
		{
			MethodName: "DeletePostLike",
			Handler:    _PostLikesService_DeletePostLike_Handler,
		},
		{
			MethodName: "ListPostLikes",
			Handler:    _PostLikesService_ListPostLikes_Handler,
		},
		{
			MethodName: "ListPostLikesById",
			Handler:    _PostLikesService_ListPostLikesById_Handler,
		},
		{
			MethodName: "ListPostLikesByPostId",
			Handler:    _PostLikesService_ListPostLikesByPostId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}

// CommentLikesServiceClient is the client API for CommentLikesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentLikesServiceClient interface {
	CreateCommentLike(ctx context.Context, in *CreateCommentLikeRequest, opts ...grpc.CallOption) (*CreateCommentLikeResponse, error)
	GetCommentLike(ctx context.Context, in *GetCommentLikeRequest, opts ...grpc.CallOption) (*GetCommentLikeResponse, error)
	DeleteCommentLike(ctx context.Context, in *DeleteCommentLikeRequest, opts ...grpc.CallOption) (*DeleteCommentLikeResponse, error)
	ListCommentLikes(ctx context.Context, in *ListCommentLikesRequest, opts ...grpc.CallOption) (*ListCommentLikesResponse, error)
	ListCommentLikesById(ctx context.Context, in *ListCommentLikesByIdRequest, opts ...grpc.CallOption) (*ListCommentLikesByIdResponse, error)
	ListCommentLikesByCommentId(ctx context.Context, in *ListCommentLikesByCommentIdRequest, opts ...grpc.CallOption) (*ListCommentLikesByCommentIdResponse, error)
}

type commentLikesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentLikesServiceClient(cc grpc.ClientConnInterface) CommentLikesServiceClient {
	return &commentLikesServiceClient{cc}
}

func (c *commentLikesServiceClient) CreateCommentLike(ctx context.Context, in *CreateCommentLikeRequest, opts ...grpc.CallOption) (*CreateCommentLikeResponse, error) {
	out := new(CreateCommentLikeResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentLikesService/CreateCommentLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentLikesServiceClient) GetCommentLike(ctx context.Context, in *GetCommentLikeRequest, opts ...grpc.CallOption) (*GetCommentLikeResponse, error) {
	out := new(GetCommentLikeResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentLikesService/GetCommentLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentLikesServiceClient) DeleteCommentLike(ctx context.Context, in *DeleteCommentLikeRequest, opts ...grpc.CallOption) (*DeleteCommentLikeResponse, error) {
	out := new(DeleteCommentLikeResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentLikesService/DeleteCommentLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentLikesServiceClient) ListCommentLikes(ctx context.Context, in *ListCommentLikesRequest, opts ...grpc.CallOption) (*ListCommentLikesResponse, error) {
	out := new(ListCommentLikesResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentLikesService/ListCommentLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentLikesServiceClient) ListCommentLikesById(ctx context.Context, in *ListCommentLikesByIdRequest, opts ...grpc.CallOption) (*ListCommentLikesByIdResponse, error) {
	out := new(ListCommentLikesByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentLikesService/ListCommentLikesById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentLikesServiceClient) ListCommentLikesByCommentId(ctx context.Context, in *ListCommentLikesByCommentIdRequest, opts ...grpc.CallOption) (*ListCommentLikesByCommentIdResponse, error) {
	out := new(ListCommentLikesByCommentIdResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentLikesService/ListCommentLikesByCommentId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentLikesServiceServer is the server API for CommentLikesService service.
// All implementations must embed UnimplementedCommentLikesServiceServer
// for forward compatibility
type CommentLikesServiceServer interface {
	CreateCommentLike(context.Context, *CreateCommentLikeRequest) (*CreateCommentLikeResponse, error)
	GetCommentLike(context.Context, *GetCommentLikeRequest) (*GetCommentLikeResponse, error)
	DeleteCommentLike(context.Context, *DeleteCommentLikeRequest) (*DeleteCommentLikeResponse, error)
	ListCommentLikes(context.Context, *ListCommentLikesRequest) (*ListCommentLikesResponse, error)
	ListCommentLikesById(context.Context, *ListCommentLikesByIdRequest) (*ListCommentLikesByIdResponse, error)
	ListCommentLikesByCommentId(context.Context, *ListCommentLikesByCommentIdRequest) (*ListCommentLikesByCommentIdResponse, error)
	mustEmbedUnimplementedCommentLikesServiceServer()
}

// UnimplementedCommentLikesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentLikesServiceServer struct {
}

func (UnimplementedCommentLikesServiceServer) CreateCommentLike(context.Context, *CreateCommentLikeRequest) (*CreateCommentLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentLike not implemented")
}
func (UnimplementedCommentLikesServiceServer) GetCommentLike(context.Context, *GetCommentLikeRequest) (*GetCommentLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentLike not implemented")
}
func (UnimplementedCommentLikesServiceServer) DeleteCommentLike(context.Context, *DeleteCommentLikeRequest) (*DeleteCommentLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentLike not implemented")
}
func (UnimplementedCommentLikesServiceServer) ListCommentLikes(context.Context, *ListCommentLikesRequest) (*ListCommentLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentLikes not implemented")
}
func (UnimplementedCommentLikesServiceServer) ListCommentLikesById(context.Context, *ListCommentLikesByIdRequest) (*ListCommentLikesByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentLikesById not implemented")
}
func (UnimplementedCommentLikesServiceServer) ListCommentLikesByCommentId(context.Context, *ListCommentLikesByCommentIdRequest) (*ListCommentLikesByCommentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentLikesByCommentId not implemented")
}
func (UnimplementedCommentLikesServiceServer) mustEmbedUnimplementedCommentLikesServiceServer() {}

// UnsafeCommentLikesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentLikesServiceServer will
// result in compilation errors.
type UnsafeCommentLikesServiceServer interface {
	mustEmbedUnimplementedCommentLikesServiceServer()
}

func RegisterCommentLikesServiceServer(s grpc.ServiceRegistrar, srv CommentLikesServiceServer) {
	s.RegisterService(&CommentLikesService_ServiceDesc, srv)
}

func _CommentLikesService_CreateCommentLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentLikesServiceServer).CreateCommentLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentLikesService/CreateCommentLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentLikesServiceServer).CreateCommentLike(ctx, req.(*CreateCommentLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentLikesService_GetCommentLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentLikesServiceServer).GetCommentLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentLikesService/GetCommentLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentLikesServiceServer).GetCommentLike(ctx, req.(*GetCommentLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentLikesService_DeleteCommentLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentLikesServiceServer).DeleteCommentLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentLikesService/DeleteCommentLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentLikesServiceServer).DeleteCommentLike(ctx, req.(*DeleteCommentLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentLikesService_ListCommentLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentLikesServiceServer).ListCommentLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentLikesService/ListCommentLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentLikesServiceServer).ListCommentLikes(ctx, req.(*ListCommentLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentLikesService_ListCommentLikesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentLikesByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentLikesServiceServer).ListCommentLikesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentLikesService/ListCommentLikesById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentLikesServiceServer).ListCommentLikesById(ctx, req.(*ListCommentLikesByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentLikesService_ListCommentLikesByCommentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentLikesByCommentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentLikesServiceServer).ListCommentLikesByCommentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentLikesService/ListCommentLikesByCommentId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentLikesServiceServer).ListCommentLikesByCommentId(ctx, req.(*ListCommentLikesByCommentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentLikesService_ServiceDesc is the grpc.ServiceDesc for CommentLikesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentLikesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CommentLikesService",
	HandlerType: (*CommentLikesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommentLike",
			Handler:    _CommentLikesService_CreateCommentLike_Handler,
		},
		{
			MethodName: "GetCommentLike",
			Handler:    _CommentLikesService_GetCommentLike_Handler,
		},
		{
			MethodName: "DeleteCommentLike",
			Handler:    _CommentLikesService_DeleteCommentLike_Handler,
		},
		{
			MethodName: "ListCommentLikes",
			Handler:    _CommentLikesService_ListCommentLikes_Handler,
		},
		{
			MethodName: "ListCommentLikesById",
			Handler:    _CommentLikesService_ListCommentLikesById_Handler,
		},
		{
			MethodName: "ListCommentLikesByCommentId",
			Handler:    _CommentLikesService_ListCommentLikesByCommentId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}

// HashtagsServiceClient is the client API for HashtagsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashtagsServiceClient interface {
	CreateHashtag(ctx context.Context, in *CreateHashtagRequest, opts ...grpc.CallOption) (*CreateHashtagResponse, error)
	GetHashtagByTitle(ctx context.Context, in *GetHashtagByTitleRequest, opts ...grpc.CallOption) (*GetHashtagByTitleResponse, error)
	GetHashtag(ctx context.Context, in *GetHashtagRequest, opts ...grpc.CallOption) (*GetHashtagResponse, error)
	UpdateHashtag(ctx context.Context, in *UpdateHashtagRequest, opts ...grpc.CallOption) (*UpdateHashtagResponse, error)
	DeleteHashtag(ctx context.Context, in *DeleteHashtagRequest, opts ...grpc.CallOption) (*DeleteHashtagResponse, error)
	ListHashtags(ctx context.Context, in *ListHashtagsRequest, opts ...grpc.CallOption) (*ListHashtagsResponse, error)
	ListHashtagsById(ctx context.Context, in *ListHashtagsByIdRequest, opts ...grpc.CallOption) (*ListHashtagsByIdResponse, error)
}

type hashtagsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHashtagsServiceClient(cc grpc.ClientConnInterface) HashtagsServiceClient {
	return &hashtagsServiceClient{cc}
}

func (c *hashtagsServiceClient) CreateHashtag(ctx context.Context, in *CreateHashtagRequest, opts ...grpc.CallOption) (*CreateHashtagResponse, error) {
	out := new(CreateHashtagResponse)
	err := c.cc.Invoke(ctx, "/pb.HashtagsService/CreateHashtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagsServiceClient) GetHashtagByTitle(ctx context.Context, in *GetHashtagByTitleRequest, opts ...grpc.CallOption) (*GetHashtagByTitleResponse, error) {
	out := new(GetHashtagByTitleResponse)
	err := c.cc.Invoke(ctx, "/pb.HashtagsService/GetHashtagByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagsServiceClient) GetHashtag(ctx context.Context, in *GetHashtagRequest, opts ...grpc.CallOption) (*GetHashtagResponse, error) {
	out := new(GetHashtagResponse)
	err := c.cc.Invoke(ctx, "/pb.HashtagsService/GetHashtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagsServiceClient) UpdateHashtag(ctx context.Context, in *UpdateHashtagRequest, opts ...grpc.CallOption) (*UpdateHashtagResponse, error) {
	out := new(UpdateHashtagResponse)
	err := c.cc.Invoke(ctx, "/pb.HashtagsService/UpdateHashtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagsServiceClient) DeleteHashtag(ctx context.Context, in *DeleteHashtagRequest, opts ...grpc.CallOption) (*DeleteHashtagResponse, error) {
	out := new(DeleteHashtagResponse)
	err := c.cc.Invoke(ctx, "/pb.HashtagsService/DeleteHashtag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagsServiceClient) ListHashtags(ctx context.Context, in *ListHashtagsRequest, opts ...grpc.CallOption) (*ListHashtagsResponse, error) {
	out := new(ListHashtagsResponse)
	err := c.cc.Invoke(ctx, "/pb.HashtagsService/ListHashtags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagsServiceClient) ListHashtagsById(ctx context.Context, in *ListHashtagsByIdRequest, opts ...grpc.CallOption) (*ListHashtagsByIdResponse, error) {
	out := new(ListHashtagsByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.HashtagsService/ListHashtagsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashtagsServiceServer is the server API for HashtagsService service.
// All implementations must embed UnimplementedHashtagsServiceServer
// for forward compatibility
type HashtagsServiceServer interface {
	CreateHashtag(context.Context, *CreateHashtagRequest) (*CreateHashtagResponse, error)
	GetHashtagByTitle(context.Context, *GetHashtagByTitleRequest) (*GetHashtagByTitleResponse, error)
	GetHashtag(context.Context, *GetHashtagRequest) (*GetHashtagResponse, error)
	UpdateHashtag(context.Context, *UpdateHashtagRequest) (*UpdateHashtagResponse, error)
	DeleteHashtag(context.Context, *DeleteHashtagRequest) (*DeleteHashtagResponse, error)
	ListHashtags(context.Context, *ListHashtagsRequest) (*ListHashtagsResponse, error)
	ListHashtagsById(context.Context, *ListHashtagsByIdRequest) (*ListHashtagsByIdResponse, error)
	mustEmbedUnimplementedHashtagsServiceServer()
}

// UnimplementedHashtagsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHashtagsServiceServer struct {
}

func (UnimplementedHashtagsServiceServer) CreateHashtag(context.Context, *CreateHashtagRequest) (*CreateHashtagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHashtag not implemented")
}
func (UnimplementedHashtagsServiceServer) GetHashtagByTitle(context.Context, *GetHashtagByTitleRequest) (*GetHashtagByTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashtagByTitle not implemented")
}
func (UnimplementedHashtagsServiceServer) GetHashtag(context.Context, *GetHashtagRequest) (*GetHashtagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashtag not implemented")
}
func (UnimplementedHashtagsServiceServer) UpdateHashtag(context.Context, *UpdateHashtagRequest) (*UpdateHashtagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHashtag not implemented")
}
func (UnimplementedHashtagsServiceServer) DeleteHashtag(context.Context, *DeleteHashtagRequest) (*DeleteHashtagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHashtag not implemented")
}
func (UnimplementedHashtagsServiceServer) ListHashtags(context.Context, *ListHashtagsRequest) (*ListHashtagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHashtags not implemented")
}
func (UnimplementedHashtagsServiceServer) ListHashtagsById(context.Context, *ListHashtagsByIdRequest) (*ListHashtagsByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHashtagsById not implemented")
}
func (UnimplementedHashtagsServiceServer) mustEmbedUnimplementedHashtagsServiceServer() {}

// UnsafeHashtagsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashtagsServiceServer will
// result in compilation errors.
type UnsafeHashtagsServiceServer interface {
	mustEmbedUnimplementedHashtagsServiceServer()
}

func RegisterHashtagsServiceServer(s grpc.ServiceRegistrar, srv HashtagsServiceServer) {
	s.RegisterService(&HashtagsService_ServiceDesc, srv)
}

func _HashtagsService_CreateHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHashtagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagsServiceServer).CreateHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HashtagsService/CreateHashtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagsServiceServer).CreateHashtag(ctx, req.(*CreateHashtagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagsService_GetHashtagByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashtagByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagsServiceServer).GetHashtagByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HashtagsService/GetHashtagByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagsServiceServer).GetHashtagByTitle(ctx, req.(*GetHashtagByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagsService_GetHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashtagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagsServiceServer).GetHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HashtagsService/GetHashtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagsServiceServer).GetHashtag(ctx, req.(*GetHashtagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagsService_UpdateHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHashtagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagsServiceServer).UpdateHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HashtagsService/UpdateHashtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagsServiceServer).UpdateHashtag(ctx, req.(*UpdateHashtagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagsService_DeleteHashtag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHashtagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagsServiceServer).DeleteHashtag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HashtagsService/DeleteHashtag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagsServiceServer).DeleteHashtag(ctx, req.(*DeleteHashtagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagsService_ListHashtags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHashtagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagsServiceServer).ListHashtags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HashtagsService/ListHashtags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagsServiceServer).ListHashtags(ctx, req.(*ListHashtagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagsService_ListHashtagsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHashtagsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagsServiceServer).ListHashtagsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HashtagsService/ListHashtagsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagsServiceServer).ListHashtagsById(ctx, req.(*ListHashtagsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HashtagsService_ServiceDesc is the grpc.ServiceDesc for HashtagsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashtagsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HashtagsService",
	HandlerType: (*HashtagsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHashtag",
			Handler:    _HashtagsService_CreateHashtag_Handler,
		},
		{
			MethodName: "GetHashtagByTitle",
			Handler:    _HashtagsService_GetHashtagByTitle_Handler,
		},
		{
			MethodName: "GetHashtag",
			Handler:    _HashtagsService_GetHashtag_Handler,
		},
		{
			MethodName: "UpdateHashtag",
			Handler:    _HashtagsService_UpdateHashtag_Handler,
		},
		{
			MethodName: "DeleteHashtag",
			Handler:    _HashtagsService_DeleteHashtag_Handler,
		},
		{
			MethodName: "ListHashtags",
			Handler:    _HashtagsService_ListHashtags_Handler,
		},
		{
			MethodName: "ListHashtagsById",
			Handler:    _HashtagsService_ListHashtagsById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}

// HashtagPostsServiceClient is the client API for HashtagPostsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashtagPostsServiceClient interface {
	CreateHashtagPost(ctx context.Context, in *CreateHashtagPostRequest, opts ...grpc.CallOption) (*CreateHashtagPostResponse, error)
	GetHashtagPost(ctx context.Context, in *GetHashtagPostRequest, opts ...grpc.CallOption) (*GetHashtagPostResponse, error)
	DeleteHashtagPost(ctx context.Context, in *DeleteHashtagPostRequest, opts ...grpc.CallOption) (*DeleteHashtagPostResponse, error)
	ListHashtagPosts(ctx context.Context, in *ListHashtagPostsRequest, opts ...grpc.CallOption) (*ListHashtagPostsResponse, error)
	ListHashtagPostsById(ctx context.Context, in *ListHashtagPostsByIdRequest, opts ...grpc.CallOption) (*ListHashtagPostsByIdResponse, error)
}

type hashtagPostsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHashtagPostsServiceClient(cc grpc.ClientConnInterface) HashtagPostsServiceClient {
	return &hashtagPostsServiceClient{cc}
}

func (c *hashtagPostsServiceClient) CreateHashtagPost(ctx context.Context, in *CreateHashtagPostRequest, opts ...grpc.CallOption) (*CreateHashtagPostResponse, error) {
	out := new(CreateHashtagPostResponse)
	err := c.cc.Invoke(ctx, "/pb.HashtagPostsService/CreateHashtagPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagPostsServiceClient) GetHashtagPost(ctx context.Context, in *GetHashtagPostRequest, opts ...grpc.CallOption) (*GetHashtagPostResponse, error) {
	out := new(GetHashtagPostResponse)
	err := c.cc.Invoke(ctx, "/pb.HashtagPostsService/GetHashtagPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagPostsServiceClient) DeleteHashtagPost(ctx context.Context, in *DeleteHashtagPostRequest, opts ...grpc.CallOption) (*DeleteHashtagPostResponse, error) {
	out := new(DeleteHashtagPostResponse)
	err := c.cc.Invoke(ctx, "/pb.HashtagPostsService/DeleteHashtagPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagPostsServiceClient) ListHashtagPosts(ctx context.Context, in *ListHashtagPostsRequest, opts ...grpc.CallOption) (*ListHashtagPostsResponse, error) {
	out := new(ListHashtagPostsResponse)
	err := c.cc.Invoke(ctx, "/pb.HashtagPostsService/ListHashtagPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashtagPostsServiceClient) ListHashtagPostsById(ctx context.Context, in *ListHashtagPostsByIdRequest, opts ...grpc.CallOption) (*ListHashtagPostsByIdResponse, error) {
	out := new(ListHashtagPostsByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.HashtagPostsService/ListHashtagPostsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashtagPostsServiceServer is the server API for HashtagPostsService service.
// All implementations must embed UnimplementedHashtagPostsServiceServer
// for forward compatibility
type HashtagPostsServiceServer interface {
	CreateHashtagPost(context.Context, *CreateHashtagPostRequest) (*CreateHashtagPostResponse, error)
	GetHashtagPost(context.Context, *GetHashtagPostRequest) (*GetHashtagPostResponse, error)
	DeleteHashtagPost(context.Context, *DeleteHashtagPostRequest) (*DeleteHashtagPostResponse, error)
	ListHashtagPosts(context.Context, *ListHashtagPostsRequest) (*ListHashtagPostsResponse, error)
	ListHashtagPostsById(context.Context, *ListHashtagPostsByIdRequest) (*ListHashtagPostsByIdResponse, error)
	mustEmbedUnimplementedHashtagPostsServiceServer()
}

// UnimplementedHashtagPostsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHashtagPostsServiceServer struct {
}

func (UnimplementedHashtagPostsServiceServer) CreateHashtagPost(context.Context, *CreateHashtagPostRequest) (*CreateHashtagPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHashtagPost not implemented")
}
func (UnimplementedHashtagPostsServiceServer) GetHashtagPost(context.Context, *GetHashtagPostRequest) (*GetHashtagPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashtagPost not implemented")
}
func (UnimplementedHashtagPostsServiceServer) DeleteHashtagPost(context.Context, *DeleteHashtagPostRequest) (*DeleteHashtagPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHashtagPost not implemented")
}
func (UnimplementedHashtagPostsServiceServer) ListHashtagPosts(context.Context, *ListHashtagPostsRequest) (*ListHashtagPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHashtagPosts not implemented")
}
func (UnimplementedHashtagPostsServiceServer) ListHashtagPostsById(context.Context, *ListHashtagPostsByIdRequest) (*ListHashtagPostsByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHashtagPostsById not implemented")
}
func (UnimplementedHashtagPostsServiceServer) mustEmbedUnimplementedHashtagPostsServiceServer() {}

// UnsafeHashtagPostsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashtagPostsServiceServer will
// result in compilation errors.
type UnsafeHashtagPostsServiceServer interface {
	mustEmbedUnimplementedHashtagPostsServiceServer()
}

func RegisterHashtagPostsServiceServer(s grpc.ServiceRegistrar, srv HashtagPostsServiceServer) {
	s.RegisterService(&HashtagPostsService_ServiceDesc, srv)
}

func _HashtagPostsService_CreateHashtagPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHashtagPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagPostsServiceServer).CreateHashtagPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HashtagPostsService/CreateHashtagPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagPostsServiceServer).CreateHashtagPost(ctx, req.(*CreateHashtagPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagPostsService_GetHashtagPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashtagPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagPostsServiceServer).GetHashtagPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HashtagPostsService/GetHashtagPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagPostsServiceServer).GetHashtagPost(ctx, req.(*GetHashtagPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagPostsService_DeleteHashtagPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHashtagPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagPostsServiceServer).DeleteHashtagPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HashtagPostsService/DeleteHashtagPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagPostsServiceServer).DeleteHashtagPost(ctx, req.(*DeleteHashtagPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagPostsService_ListHashtagPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHashtagPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagPostsServiceServer).ListHashtagPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HashtagPostsService/ListHashtagPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagPostsServiceServer).ListHashtagPosts(ctx, req.(*ListHashtagPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashtagPostsService_ListHashtagPostsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHashtagPostsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagPostsServiceServer).ListHashtagPostsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HashtagPostsService/ListHashtagPostsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagPostsServiceServer).ListHashtagPostsById(ctx, req.(*ListHashtagPostsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HashtagPostsService_ServiceDesc is the grpc.ServiceDesc for HashtagPostsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashtagPostsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HashtagPostsService",
	HandlerType: (*HashtagPostsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHashtagPost",
			Handler:    _HashtagPostsService_CreateHashtagPost_Handler,
		},
		{
			MethodName: "GetHashtagPost",
			Handler:    _HashtagPostsService_GetHashtagPost_Handler,
		},
		{
			MethodName: "DeleteHashtagPost",
			Handler:    _HashtagPostsService_DeleteHashtagPost_Handler,
		},
		{
			MethodName: "ListHashtagPosts",
			Handler:    _HashtagPostsService_ListHashtagPosts_Handler,
		},
		{
			MethodName: "ListHashtagPostsById",
			Handler:    _HashtagPostsService_ListHashtagPostsById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}

// FollowersServiceClient is the client API for FollowersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowersServiceClient interface {
	CreateFollower(ctx context.Context, in *CreateFollowerRequest, opts ...grpc.CallOption) (*CreateFollowerResponse, error)
	GetFollower(ctx context.Context, in *GetFollowerRequest, opts ...grpc.CallOption) (*GetFollowerResponse, error)
	DeleteFollower(ctx context.Context, in *DeleteFollowerRequest, opts ...grpc.CallOption) (*DeleteFollowerResponse, error)
	ListFollowers(ctx context.Context, in *ListFollowersRequest, opts ...grpc.CallOption) (*ListFollowersResponse, error)
	ListFollowersById(ctx context.Context, in *ListFollowersByIdRequest, opts ...grpc.CallOption) (*ListFollowersByIdResponse, error)
	ListFollowersByLeaderId(ctx context.Context, in *ListFollowersByLeaderIdRequest, opts ...grpc.CallOption) (*ListFollowersByLeaderIdResponse, error)
}

type followersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowersServiceClient(cc grpc.ClientConnInterface) FollowersServiceClient {
	return &followersServiceClient{cc}
}

func (c *followersServiceClient) CreateFollower(ctx context.Context, in *CreateFollowerRequest, opts ...grpc.CallOption) (*CreateFollowerResponse, error) {
	out := new(CreateFollowerResponse)
	err := c.cc.Invoke(ctx, "/pb.FollowersService/CreateFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) GetFollower(ctx context.Context, in *GetFollowerRequest, opts ...grpc.CallOption) (*GetFollowerResponse, error) {
	out := new(GetFollowerResponse)
	err := c.cc.Invoke(ctx, "/pb.FollowersService/GetFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) DeleteFollower(ctx context.Context, in *DeleteFollowerRequest, opts ...grpc.CallOption) (*DeleteFollowerResponse, error) {
	out := new(DeleteFollowerResponse)
	err := c.cc.Invoke(ctx, "/pb.FollowersService/DeleteFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) ListFollowers(ctx context.Context, in *ListFollowersRequest, opts ...grpc.CallOption) (*ListFollowersResponse, error) {
	out := new(ListFollowersResponse)
	err := c.cc.Invoke(ctx, "/pb.FollowersService/ListFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) ListFollowersById(ctx context.Context, in *ListFollowersByIdRequest, opts ...grpc.CallOption) (*ListFollowersByIdResponse, error) {
	out := new(ListFollowersByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.FollowersService/ListFollowersById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) ListFollowersByLeaderId(ctx context.Context, in *ListFollowersByLeaderIdRequest, opts ...grpc.CallOption) (*ListFollowersByLeaderIdResponse, error) {
	out := new(ListFollowersByLeaderIdResponse)
	err := c.cc.Invoke(ctx, "/pb.FollowersService/ListFollowersByLeaderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowersServiceServer is the server API for FollowersService service.
// All implementations must embed UnimplementedFollowersServiceServer
// for forward compatibility
type FollowersServiceServer interface {
	CreateFollower(context.Context, *CreateFollowerRequest) (*CreateFollowerResponse, error)
	GetFollower(context.Context, *GetFollowerRequest) (*GetFollowerResponse, error)
	DeleteFollower(context.Context, *DeleteFollowerRequest) (*DeleteFollowerResponse, error)
	ListFollowers(context.Context, *ListFollowersRequest) (*ListFollowersResponse, error)
	ListFollowersById(context.Context, *ListFollowersByIdRequest) (*ListFollowersByIdResponse, error)
	ListFollowersByLeaderId(context.Context, *ListFollowersByLeaderIdRequest) (*ListFollowersByLeaderIdResponse, error)
	mustEmbedUnimplementedFollowersServiceServer()
}

// UnimplementedFollowersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowersServiceServer struct {
}

func (UnimplementedFollowersServiceServer) CreateFollower(context.Context, *CreateFollowerRequest) (*CreateFollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollower not implemented")
}
func (UnimplementedFollowersServiceServer) GetFollower(context.Context, *GetFollowerRequest) (*GetFollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollower not implemented")
}
func (UnimplementedFollowersServiceServer) DeleteFollower(context.Context, *DeleteFollowerRequest) (*DeleteFollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollower not implemented")
}
func (UnimplementedFollowersServiceServer) ListFollowers(context.Context, *ListFollowersRequest) (*ListFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowers not implemented")
}
func (UnimplementedFollowersServiceServer) ListFollowersById(context.Context, *ListFollowersByIdRequest) (*ListFollowersByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowersById not implemented")
}
func (UnimplementedFollowersServiceServer) ListFollowersByLeaderId(context.Context, *ListFollowersByLeaderIdRequest) (*ListFollowersByLeaderIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowersByLeaderId not implemented")
}
func (UnimplementedFollowersServiceServer) mustEmbedUnimplementedFollowersServiceServer() {}

// UnsafeFollowersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowersServiceServer will
// result in compilation errors.
type UnsafeFollowersServiceServer interface {
	mustEmbedUnimplementedFollowersServiceServer()
}

func RegisterFollowersServiceServer(s grpc.ServiceRegistrar, srv FollowersServiceServer) {
	s.RegisterService(&FollowersService_ServiceDesc, srv)
}

func _FollowersService_CreateFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).CreateFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FollowersService/CreateFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).CreateFollower(ctx, req.(*CreateFollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_GetFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).GetFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FollowersService/GetFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).GetFollower(ctx, req.(*GetFollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_DeleteFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).DeleteFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FollowersService/DeleteFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).DeleteFollower(ctx, req.(*DeleteFollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_ListFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).ListFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FollowersService/ListFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).ListFollowers(ctx, req.(*ListFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_ListFollowersById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowersByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).ListFollowersById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FollowersService/ListFollowersById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).ListFollowersById(ctx, req.(*ListFollowersByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_ListFollowersByLeaderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowersByLeaderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).ListFollowersByLeaderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FollowersService/ListFollowersByLeaderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).ListFollowersByLeaderId(ctx, req.(*ListFollowersByLeaderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowersService_ServiceDesc is the grpc.ServiceDesc for FollowersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FollowersService",
	HandlerType: (*FollowersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFollower",
			Handler:    _FollowersService_CreateFollower_Handler,
		},
		{
			MethodName: "GetFollower",
			Handler:    _FollowersService_GetFollower_Handler,
		},
		{
			MethodName: "DeleteFollower",
			Handler:    _FollowersService_DeleteFollower_Handler,
		},
		{
			MethodName: "ListFollowers",
			Handler:    _FollowersService_ListFollowers_Handler,
		},
		{
			MethodName: "ListFollowersById",
			Handler:    _FollowersService_ListFollowersById_Handler,
		},
		{
			MethodName: "ListFollowersByLeaderId",
			Handler:    _FollowersService_ListFollowersByLeaderId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}
