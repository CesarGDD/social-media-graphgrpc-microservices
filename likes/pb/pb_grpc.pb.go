// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostLikesServiceClient is the client API for PostLikesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostLikesServiceClient interface {
	CreatePostLike(ctx context.Context, in *CreatePostLikeRequest, opts ...grpc.CallOption) (*CreatePostLikeResponse, error)
	GetPostLike(ctx context.Context, in *GetPostLikeRequest, opts ...grpc.CallOption) (*GetPostLikeResponse, error)
	DeletePostLikeById(ctx context.Context, in *DeletePostLikeByIdRequest, opts ...grpc.CallOption) (*DeletePostLikeByIdResponse, error)
	DeletePostLikeByUserId(ctx context.Context, in *DeletePostLikeByUserIdRequest, opts ...grpc.CallOption) (*DeletePostLikeByUserIdResponse, error)
	ListPostLikes(ctx context.Context, in *ListPostLikesRequest, opts ...grpc.CallOption) (*ListPostLikesResponse, error)
	ListPostLikesById(ctx context.Context, in *ListPostLikesByIdRequest, opts ...grpc.CallOption) (*ListPostLikesByIdResponse, error)
	ListPostLikesByPostId(ctx context.Context, in *ListPostLikesByPostIdRequest, opts ...grpc.CallOption) (*ListPostLikesByPostIdResponse, error)
}

type postLikesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostLikesServiceClient(cc grpc.ClientConnInterface) PostLikesServiceClient {
	return &postLikesServiceClient{cc}
}

func (c *postLikesServiceClient) CreatePostLike(ctx context.Context, in *CreatePostLikeRequest, opts ...grpc.CallOption) (*CreatePostLikeResponse, error) {
	out := new(CreatePostLikeResponse)
	err := c.cc.Invoke(ctx, "/pb.PostLikesService/CreatePostLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikesServiceClient) GetPostLike(ctx context.Context, in *GetPostLikeRequest, opts ...grpc.CallOption) (*GetPostLikeResponse, error) {
	out := new(GetPostLikeResponse)
	err := c.cc.Invoke(ctx, "/pb.PostLikesService/GetPostLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikesServiceClient) DeletePostLikeById(ctx context.Context, in *DeletePostLikeByIdRequest, opts ...grpc.CallOption) (*DeletePostLikeByIdResponse, error) {
	out := new(DeletePostLikeByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.PostLikesService/DeletePostLikeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikesServiceClient) DeletePostLikeByUserId(ctx context.Context, in *DeletePostLikeByUserIdRequest, opts ...grpc.CallOption) (*DeletePostLikeByUserIdResponse, error) {
	out := new(DeletePostLikeByUserIdResponse)
	err := c.cc.Invoke(ctx, "/pb.PostLikesService/DeletePostLikeByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikesServiceClient) ListPostLikes(ctx context.Context, in *ListPostLikesRequest, opts ...grpc.CallOption) (*ListPostLikesResponse, error) {
	out := new(ListPostLikesResponse)
	err := c.cc.Invoke(ctx, "/pb.PostLikesService/ListPostLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikesServiceClient) ListPostLikesById(ctx context.Context, in *ListPostLikesByIdRequest, opts ...grpc.CallOption) (*ListPostLikesByIdResponse, error) {
	out := new(ListPostLikesByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.PostLikesService/ListPostLikesById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postLikesServiceClient) ListPostLikesByPostId(ctx context.Context, in *ListPostLikesByPostIdRequest, opts ...grpc.CallOption) (*ListPostLikesByPostIdResponse, error) {
	out := new(ListPostLikesByPostIdResponse)
	err := c.cc.Invoke(ctx, "/pb.PostLikesService/ListPostLikesByPostId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostLikesServiceServer is the server API for PostLikesService service.
// All implementations must embed UnimplementedPostLikesServiceServer
// for forward compatibility
type PostLikesServiceServer interface {
	CreatePostLike(context.Context, *CreatePostLikeRequest) (*CreatePostLikeResponse, error)
	GetPostLike(context.Context, *GetPostLikeRequest) (*GetPostLikeResponse, error)
	DeletePostLikeById(context.Context, *DeletePostLikeByIdRequest) (*DeletePostLikeByIdResponse, error)
	DeletePostLikeByUserId(context.Context, *DeletePostLikeByUserIdRequest) (*DeletePostLikeByUserIdResponse, error)
	ListPostLikes(context.Context, *ListPostLikesRequest) (*ListPostLikesResponse, error)
	ListPostLikesById(context.Context, *ListPostLikesByIdRequest) (*ListPostLikesByIdResponse, error)
	ListPostLikesByPostId(context.Context, *ListPostLikesByPostIdRequest) (*ListPostLikesByPostIdResponse, error)
	mustEmbedUnimplementedPostLikesServiceServer()
}

// UnimplementedPostLikesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostLikesServiceServer struct {
}

func (UnimplementedPostLikesServiceServer) CreatePostLike(context.Context, *CreatePostLikeRequest) (*CreatePostLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostLike not implemented")
}
func (UnimplementedPostLikesServiceServer) GetPostLike(context.Context, *GetPostLikeRequest) (*GetPostLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostLike not implemented")
}
func (UnimplementedPostLikesServiceServer) DeletePostLikeById(context.Context, *DeletePostLikeByIdRequest) (*DeletePostLikeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostLikeById not implemented")
}
func (UnimplementedPostLikesServiceServer) DeletePostLikeByUserId(context.Context, *DeletePostLikeByUserIdRequest) (*DeletePostLikeByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePostLikeByUserId not implemented")
}
func (UnimplementedPostLikesServiceServer) ListPostLikes(context.Context, *ListPostLikesRequest) (*ListPostLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostLikes not implemented")
}
func (UnimplementedPostLikesServiceServer) ListPostLikesById(context.Context, *ListPostLikesByIdRequest) (*ListPostLikesByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostLikesById not implemented")
}
func (UnimplementedPostLikesServiceServer) ListPostLikesByPostId(context.Context, *ListPostLikesByPostIdRequest) (*ListPostLikesByPostIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostLikesByPostId not implemented")
}
func (UnimplementedPostLikesServiceServer) mustEmbedUnimplementedPostLikesServiceServer() {}

// UnsafePostLikesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostLikesServiceServer will
// result in compilation errors.
type UnsafePostLikesServiceServer interface {
	mustEmbedUnimplementedPostLikesServiceServer()
}

func RegisterPostLikesServiceServer(s grpc.ServiceRegistrar, srv PostLikesServiceServer) {
	s.RegisterService(&PostLikesService_ServiceDesc, srv)
}

func _PostLikesService_CreatePostLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikesServiceServer).CreatePostLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostLikesService/CreatePostLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikesServiceServer).CreatePostLike(ctx, req.(*CreatePostLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikesService_GetPostLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikesServiceServer).GetPostLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostLikesService/GetPostLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikesServiceServer).GetPostLike(ctx, req.(*GetPostLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikesService_DeletePostLikeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostLikeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikesServiceServer).DeletePostLikeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostLikesService/DeletePostLikeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikesServiceServer).DeletePostLikeById(ctx, req.(*DeletePostLikeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikesService_DeletePostLikeByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostLikeByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikesServiceServer).DeletePostLikeByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostLikesService/DeletePostLikeByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikesServiceServer).DeletePostLikeByUserId(ctx, req.(*DeletePostLikeByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikesService_ListPostLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikesServiceServer).ListPostLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostLikesService/ListPostLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikesServiceServer).ListPostLikes(ctx, req.(*ListPostLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikesService_ListPostLikesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostLikesByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikesServiceServer).ListPostLikesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostLikesService/ListPostLikesById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikesServiceServer).ListPostLikesById(ctx, req.(*ListPostLikesByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostLikesService_ListPostLikesByPostId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostLikesByPostIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostLikesServiceServer).ListPostLikesByPostId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PostLikesService/ListPostLikesByPostId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostLikesServiceServer).ListPostLikesByPostId(ctx, req.(*ListPostLikesByPostIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostLikesService_ServiceDesc is the grpc.ServiceDesc for PostLikesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostLikesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PostLikesService",
	HandlerType: (*PostLikesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePostLike",
			Handler:    _PostLikesService_CreatePostLike_Handler,
		},
		{
			MethodName: "GetPostLike",
			Handler:    _PostLikesService_GetPostLike_Handler,
		},
		{
			MethodName: "DeletePostLikeById",
			Handler:    _PostLikesService_DeletePostLikeById_Handler,
		},
		{
			MethodName: "DeletePostLikeByUserId",
			Handler:    _PostLikesService_DeletePostLikeByUserId_Handler,
		},
		{
			MethodName: "ListPostLikes",
			Handler:    _PostLikesService_ListPostLikes_Handler,
		},
		{
			MethodName: "ListPostLikesById",
			Handler:    _PostLikesService_ListPostLikesById_Handler,
		},
		{
			MethodName: "ListPostLikesByPostId",
			Handler:    _PostLikesService_ListPostLikesByPostId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}

// CommentLikesServiceClient is the client API for CommentLikesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentLikesServiceClient interface {
	CreateCommentLike(ctx context.Context, in *CreateCommentLikeRequest, opts ...grpc.CallOption) (*CreateCommentLikeResponse, error)
	GetCommentLike(ctx context.Context, in *GetCommentLikeRequest, opts ...grpc.CallOption) (*GetCommentLikeResponse, error)
	DeleteCommentLikeById(ctx context.Context, in *DeleteCommentLikeByIdRequest, opts ...grpc.CallOption) (*DeleteCommentLikeByIdResponse, error)
	DeleteCommentLikeByUserId(ctx context.Context, in *DeleteCommentLikeByUserIdRequest, opts ...grpc.CallOption) (*DeleteCommentLikeByUserIdResponse, error)
	ListCommentLikes(ctx context.Context, in *ListCommentLikesRequest, opts ...grpc.CallOption) (*ListCommentLikesResponse, error)
	ListCommentLikesById(ctx context.Context, in *ListCommentLikesByIdRequest, opts ...grpc.CallOption) (*ListCommentLikesByIdResponse, error)
	ListCommentLikesByCommentId(ctx context.Context, in *ListCommentLikesByCommentIdRequest, opts ...grpc.CallOption) (*ListCommentLikesByCommentIdResponse, error)
}

type commentLikesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentLikesServiceClient(cc grpc.ClientConnInterface) CommentLikesServiceClient {
	return &commentLikesServiceClient{cc}
}

func (c *commentLikesServiceClient) CreateCommentLike(ctx context.Context, in *CreateCommentLikeRequest, opts ...grpc.CallOption) (*CreateCommentLikeResponse, error) {
	out := new(CreateCommentLikeResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentLikesService/CreateCommentLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentLikesServiceClient) GetCommentLike(ctx context.Context, in *GetCommentLikeRequest, opts ...grpc.CallOption) (*GetCommentLikeResponse, error) {
	out := new(GetCommentLikeResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentLikesService/GetCommentLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentLikesServiceClient) DeleteCommentLikeById(ctx context.Context, in *DeleteCommentLikeByIdRequest, opts ...grpc.CallOption) (*DeleteCommentLikeByIdResponse, error) {
	out := new(DeleteCommentLikeByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentLikesService/DeleteCommentLikeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentLikesServiceClient) DeleteCommentLikeByUserId(ctx context.Context, in *DeleteCommentLikeByUserIdRequest, opts ...grpc.CallOption) (*DeleteCommentLikeByUserIdResponse, error) {
	out := new(DeleteCommentLikeByUserIdResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentLikesService/DeleteCommentLikeByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentLikesServiceClient) ListCommentLikes(ctx context.Context, in *ListCommentLikesRequest, opts ...grpc.CallOption) (*ListCommentLikesResponse, error) {
	out := new(ListCommentLikesResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentLikesService/ListCommentLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentLikesServiceClient) ListCommentLikesById(ctx context.Context, in *ListCommentLikesByIdRequest, opts ...grpc.CallOption) (*ListCommentLikesByIdResponse, error) {
	out := new(ListCommentLikesByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentLikesService/ListCommentLikesById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentLikesServiceClient) ListCommentLikesByCommentId(ctx context.Context, in *ListCommentLikesByCommentIdRequest, opts ...grpc.CallOption) (*ListCommentLikesByCommentIdResponse, error) {
	out := new(ListCommentLikesByCommentIdResponse)
	err := c.cc.Invoke(ctx, "/pb.CommentLikesService/ListCommentLikesByCommentId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentLikesServiceServer is the server API for CommentLikesService service.
// All implementations must embed UnimplementedCommentLikesServiceServer
// for forward compatibility
type CommentLikesServiceServer interface {
	CreateCommentLike(context.Context, *CreateCommentLikeRequest) (*CreateCommentLikeResponse, error)
	GetCommentLike(context.Context, *GetCommentLikeRequest) (*GetCommentLikeResponse, error)
	DeleteCommentLikeById(context.Context, *DeleteCommentLikeByIdRequest) (*DeleteCommentLikeByIdResponse, error)
	DeleteCommentLikeByUserId(context.Context, *DeleteCommentLikeByUserIdRequest) (*DeleteCommentLikeByUserIdResponse, error)
	ListCommentLikes(context.Context, *ListCommentLikesRequest) (*ListCommentLikesResponse, error)
	ListCommentLikesById(context.Context, *ListCommentLikesByIdRequest) (*ListCommentLikesByIdResponse, error)
	ListCommentLikesByCommentId(context.Context, *ListCommentLikesByCommentIdRequest) (*ListCommentLikesByCommentIdResponse, error)
	mustEmbedUnimplementedCommentLikesServiceServer()
}

// UnimplementedCommentLikesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentLikesServiceServer struct {
}

func (UnimplementedCommentLikesServiceServer) CreateCommentLike(context.Context, *CreateCommentLikeRequest) (*CreateCommentLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentLike not implemented")
}
func (UnimplementedCommentLikesServiceServer) GetCommentLike(context.Context, *GetCommentLikeRequest) (*GetCommentLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentLike not implemented")
}
func (UnimplementedCommentLikesServiceServer) DeleteCommentLikeById(context.Context, *DeleteCommentLikeByIdRequest) (*DeleteCommentLikeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentLikeById not implemented")
}
func (UnimplementedCommentLikesServiceServer) DeleteCommentLikeByUserId(context.Context, *DeleteCommentLikeByUserIdRequest) (*DeleteCommentLikeByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentLikeByUserId not implemented")
}
func (UnimplementedCommentLikesServiceServer) ListCommentLikes(context.Context, *ListCommentLikesRequest) (*ListCommentLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentLikes not implemented")
}
func (UnimplementedCommentLikesServiceServer) ListCommentLikesById(context.Context, *ListCommentLikesByIdRequest) (*ListCommentLikesByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentLikesById not implemented")
}
func (UnimplementedCommentLikesServiceServer) ListCommentLikesByCommentId(context.Context, *ListCommentLikesByCommentIdRequest) (*ListCommentLikesByCommentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentLikesByCommentId not implemented")
}
func (UnimplementedCommentLikesServiceServer) mustEmbedUnimplementedCommentLikesServiceServer() {}

// UnsafeCommentLikesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentLikesServiceServer will
// result in compilation errors.
type UnsafeCommentLikesServiceServer interface {
	mustEmbedUnimplementedCommentLikesServiceServer()
}

func RegisterCommentLikesServiceServer(s grpc.ServiceRegistrar, srv CommentLikesServiceServer) {
	s.RegisterService(&CommentLikesService_ServiceDesc, srv)
}

func _CommentLikesService_CreateCommentLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentLikesServiceServer).CreateCommentLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentLikesService/CreateCommentLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentLikesServiceServer).CreateCommentLike(ctx, req.(*CreateCommentLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentLikesService_GetCommentLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentLikesServiceServer).GetCommentLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentLikesService/GetCommentLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentLikesServiceServer).GetCommentLike(ctx, req.(*GetCommentLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentLikesService_DeleteCommentLikeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentLikeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentLikesServiceServer).DeleteCommentLikeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentLikesService/DeleteCommentLikeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentLikesServiceServer).DeleteCommentLikeById(ctx, req.(*DeleteCommentLikeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentLikesService_DeleteCommentLikeByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentLikeByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentLikesServiceServer).DeleteCommentLikeByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentLikesService/DeleteCommentLikeByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentLikesServiceServer).DeleteCommentLikeByUserId(ctx, req.(*DeleteCommentLikeByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentLikesService_ListCommentLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentLikesServiceServer).ListCommentLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentLikesService/ListCommentLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentLikesServiceServer).ListCommentLikes(ctx, req.(*ListCommentLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentLikesService_ListCommentLikesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentLikesByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentLikesServiceServer).ListCommentLikesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentLikesService/ListCommentLikesById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentLikesServiceServer).ListCommentLikesById(ctx, req.(*ListCommentLikesByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentLikesService_ListCommentLikesByCommentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentLikesByCommentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentLikesServiceServer).ListCommentLikesByCommentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentLikesService/ListCommentLikesByCommentId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentLikesServiceServer).ListCommentLikesByCommentId(ctx, req.(*ListCommentLikesByCommentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentLikesService_ServiceDesc is the grpc.ServiceDesc for CommentLikesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentLikesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CommentLikesService",
	HandlerType: (*CommentLikesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommentLike",
			Handler:    _CommentLikesService_CreateCommentLike_Handler,
		},
		{
			MethodName: "GetCommentLike",
			Handler:    _CommentLikesService_GetCommentLike_Handler,
		},
		{
			MethodName: "DeleteCommentLikeById",
			Handler:    _CommentLikesService_DeleteCommentLikeById_Handler,
		},
		{
			MethodName: "DeleteCommentLikeByUserId",
			Handler:    _CommentLikesService_DeleteCommentLikeByUserId_Handler,
		},
		{
			MethodName: "ListCommentLikes",
			Handler:    _CommentLikesService_ListCommentLikes_Handler,
		},
		{
			MethodName: "ListCommentLikesById",
			Handler:    _CommentLikesService_ListCommentLikesById_Handler,
		},
		{
			MethodName: "ListCommentLikesByCommentId",
			Handler:    _CommentLikesService_ListCommentLikesByCommentId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}
